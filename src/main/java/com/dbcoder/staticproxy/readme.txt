Java 静态代理
一个典型的代理模式通常有三个角色，即：“代理三要素”
1.共同接口
2.真实对象
3.代理对象

静态代理的优缺点
优点：扩展原功能，不入侵源代码
缺点：
会重复创建多个逻辑相同，仅仅RealObject引用不同的Proxy
会导致proxy的膨胀，而且这种膨胀往往是无意义的。此外，假如方法签名是相同的，更需要在调用的时候引入额外的判断逻辑

动态代理：
Proxy.newProxyInstance 传入的是一个ClassLoader， 一个代理接口，和我们定义的handler，返回的是一个Proxy的实例。

仔细体会这个过程，其实有点类似我们在静态代理中提到的方案一，生成了一个包含我们扩展功能，持有RealObject引用，实现Action接口的代理实例Proxy。只不过这个Proxy不是我们自己写的，而是java帮我们生成的，有没有一点动态的味道。

让我们再回顾一下代理三要素：真实对象：RealObject，代理接口：Action，代理实例：Proxy

上面的代码实含义也就是，输入 RealObject、Action，返回一个Proxy。妥妥的代理模式。

综上，动态生成+代理模式，也就是动态代理。